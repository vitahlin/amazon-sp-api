/*
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.CancelShipmentResponse;
import io.swagger.client.model.DirectPurchaseRequest;
import io.swagger.client.model.DirectPurchaseResponse;
import io.swagger.client.model.ErrorList;
import io.swagger.client.model.GenerateCollectionFormRequest;
import io.swagger.client.model.GenerateCollectionFormResponse;
import io.swagger.client.model.GetAccessPointsResponse;
import io.swagger.client.model.GetAdditionalInputsResponse;
import io.swagger.client.model.GetCarrierAccountFormInputsResponse;
import io.swagger.client.model.GetCarrierAccountsRequest;
import io.swagger.client.model.GetCarrierAccountsResponse;
import io.swagger.client.model.GetCollectionFormHistoryRequest;
import io.swagger.client.model.GetCollectionFormHistoryResponse;
import io.swagger.client.model.GetCollectionFormResponse;
import io.swagger.client.model.GetRatesRequest;
import io.swagger.client.model.GetRatesResponse;
import io.swagger.client.model.GetShipmentDocumentsResponse;
import io.swagger.client.model.GetTrackingResponse;
import io.swagger.client.model.GetUnmanifestedShipmentsRequest;
import io.swagger.client.model.GetUnmanifestedShipmentsResponse;
import io.swagger.client.model.LinkCarrierAccountRequest;
import io.swagger.client.model.LinkCarrierAccountResponse;
import io.swagger.client.model.OneClickShipmentRequest;
import io.swagger.client.model.OneClickShipmentResponse;
import io.swagger.client.model.PurchaseShipmentRequest;
import io.swagger.client.model.PurchaseShipmentResponse;
import io.swagger.client.model.UnlinkCarrierAccountRequest;
import io.swagger.client.model.UnlinkCarrierAccountResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.amazon.SellingPartnerAPIAA.LWAException;

/**
* API tests for ShippingApi
*/
@Ignore
public class ShippingApiTest {

private final ShippingApi api = new ShippingApi();


/**
* 
*
* Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void cancelShipmentTest() throws ApiException, LWAException {
    String shipmentId = null;
    String xAmznShippingBusinessId = null;
CancelShipmentResponse response = api.cancelShipment(shipmentId, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void directPurchaseShipmentTest() throws ApiException, LWAException {
    DirectPurchaseRequest body = null;
    String xAmznIdempotencyKey = null;
    String locale = null;
    String xAmznShippingBusinessId = null;
DirectPurchaseResponse response = api.directPurchaseShipment(body, xAmznIdempotencyKey, locale, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API  Call to generate the collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void generateCollectionFormTest() throws ApiException, LWAException {
    GenerateCollectionFormRequest body = null;
    String xAmznIdempotencyKey = null;
    String xAmznShippingBusinessId = null;
GenerateCollectionFormResponse response = api.generateCollectionForm(body, xAmznIdempotencyKey, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Returns a list of access points in proximity of input postal code.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getAccessPointsTest() throws ApiException, LWAException {
    List<String> accessPointTypes = null;
    String countryCode = null;
    String postalCode = null;
    String xAmznShippingBusinessId = null;
GetAccessPointsResponse response = api.getAccessPoints(accessPointTypes, countryCode, postalCode, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getAdditionalInputsTest() throws ApiException, LWAException {
    String requestToken = null;
    String rateId = null;
    String xAmznShippingBusinessId = null;
GetAdditionalInputsResponse response = api.getAdditionalInputs(requestToken, rateId, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API will return a list of input schema required to register a shipper account with the carrier.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getCarrierAccountFormInputsTest() throws ApiException, LWAException {
    String xAmznShippingBusinessId = null;
GetCarrierAccountFormInputsResponse response = api.getCarrierAccountFormInputs(xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API will return Get all carrier accounts for a merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getCarrierAccountsTest() throws ApiException, LWAException {
    GetCarrierAccountsRequest body = null;
    String xAmznShippingBusinessId = null;
GetCarrierAccountsResponse response = api.getCarrierAccounts(body, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API reprint a collection form.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getCollectionFormTest() throws ApiException, LWAException {
    String collectionFormId = null;
    String xAmznShippingBusinessId = null;
GetCollectionFormResponse response = api.getCollectionForm(collectionFormId, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API Call to get the history of the previously generated collection forms.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getCollectionFormHistoryTest() throws ApiException, LWAException {
    GetCollectionFormHistoryRequest body = null;
    String xAmznShippingBusinessId = null;
GetCollectionFormHistoryResponse response = api.getCollectionFormHistory(body, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Returns the available shipping service offerings.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getRatesTest() throws ApiException, LWAException {
    GetRatesRequest body = null;
    String xAmznShippingBusinessId = null;
GetRatesResponse response = api.getRates(body, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Returns the shipping documents associated with a package in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getShipmentDocumentsTest() throws ApiException, LWAException {
    String shipmentId = null;
    String packageClientReferenceId = null;
    String format = null;
    BigDecimal dpi = null;
    String xAmznShippingBusinessId = null;
GetShipmentDocumentsResponse response = api.getShipmentDocuments(shipmentId, packageClientReferenceId, format, dpi, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Returns tracking information for a purchased shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getTrackingTest() throws ApiException, LWAException {
    String trackingId = null;
    String carrierId = null;
    String xAmznShippingBusinessId = null;
GetTrackingResponse response = api.getTracking(trackingId, carrierId, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments         with an eligible carrier for manifesting shall be returned.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void getUnmanifestedShipmentsTest() throws ApiException, LWAException {
    GetUnmanifestedShipmentsRequest body = null;
    String xAmznShippingBusinessId = null;
GetUnmanifestedShipmentsResponse response = api.getUnmanifestedShipments(body, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API associates/links the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void linkCarrierAccountTest() throws ApiException, LWAException {
    String carrierId = null;
    LinkCarrierAccountRequest body = null;
    String xAmznShippingBusinessId = null;
LinkCarrierAccountResponse response = api.linkCarrierAccount(carrierId, body, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Purchases a shipping service identifier and returns purchase-related details and documents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void oneClickShipmentTest() throws ApiException, LWAException {
    OneClickShipmentRequest body = null;
    String xAmznShippingBusinessId = null;
OneClickShipmentResponse response = api.oneClickShipment(body, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* Purchases a shipping service and returns purchase related details and documents.  Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to \&quot;TOKEN_EXPIRED\&quot;. If you receive this error response, you must get the rates for the shipment again.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void purchaseShipmentTest() throws ApiException, LWAException {
    PurchaseShipmentRequest body = null;
    String xAmznIdempotencyKey = null;
    String xAmznShippingBusinessId = null;
PurchaseShipmentResponse response = api.purchaseShipment(body, xAmznIdempotencyKey, xAmznShippingBusinessId);

// TODO: test validations
}

/**
* 
*
* This API Unlink the specified carrier account with the merchant.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 80 | 100 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*
* @throws ApiException if the Api call fails
* @throws LWAException If calls to fetch LWA access token fails
*/
@Test
public void unlinkCarrierAccountTest() throws ApiException, LWAException {
    String carrierId = null;
    UnlinkCarrierAccountRequest body = null;
    String xAmznShippingBusinessId = null;
UnlinkCarrierAccountResponse response = api.unlinkCarrierAccount(carrierId, body, xAmznShippingBusinessId);

// TODO: test validations
}

}