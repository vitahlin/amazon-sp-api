/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.MoneyType;
import java.io.IOException;

/**
 * The shipping option available for the offer.
 */
@ApiModel(description = "The shipping option available for the offer.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-10-31T20:08:31.630+08:00")
public class ShippingOption {
  /**
   * The type of the shipping option.
   */
  @JsonAdapter(ShippingOptionTypeEnum.Adapter.class)
  public enum ShippingOptionTypeEnum {
    DEFAULT("DEFAULT");

    private String value;

    ShippingOptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShippingOptionTypeEnum fromValue(String text) {
      for (ShippingOptionTypeEnum b : ShippingOptionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ShippingOptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShippingOptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShippingOptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ShippingOptionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("shippingOptionType")
  private ShippingOptionTypeEnum shippingOptionType = null;

  @SerializedName("price")
  private MoneyType price = null;

  public ShippingOption shippingOptionType(ShippingOptionTypeEnum shippingOptionType) {
    this.shippingOptionType = shippingOptionType;
    return this;
  }

   /**
   * The type of the shipping option.
   * @return shippingOptionType
  **/
  @ApiModelProperty(required = true, value = "The type of the shipping option.")
  public ShippingOptionTypeEnum getShippingOptionType() {
    return shippingOptionType;
  }

  public void setShippingOptionType(ShippingOptionTypeEnum shippingOptionType) {
    this.shippingOptionType = shippingOptionType;
  }

  public ShippingOption price(MoneyType price) {
    this.price = price;
    return this;
  }

   /**
   * Shipping price for the offer.
   * @return price
  **/
  @ApiModelProperty(required = true, value = "Shipping price for the offer.")
  public MoneyType getPrice() {
    return price;
  }

  public void setPrice(MoneyType price) {
    this.price = price;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingOption shippingOption = (ShippingOption) o;
    return Objects.equals(this.shippingOptionType, shippingOption.shippingOptionType) &&
        Objects.equals(this.price, shippingOption.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shippingOptionType, price);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingOption {\n");
    
    sb.append("    shippingOptionType: ").append(toIndentedString(shippingOptionType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

