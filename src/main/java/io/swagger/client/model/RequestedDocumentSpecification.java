/*
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DocumentFormat;
import io.swagger.client.model.DocumentSize;
import io.swagger.client.model.DocumentType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
 */
@ApiModel(description = "The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-10-31T20:18:11.724+08:00")
public class RequestedDocumentSpecification {
  @SerializedName("format")
  private DocumentFormat format = null;

  @SerializedName("size")
  private DocumentSize size = null;

  @SerializedName("dpi")
  private Integer dpi = null;

  @SerializedName("pageLayout")
  private String pageLayout = null;

  @SerializedName("needFileJoining")
  private Boolean needFileJoining = null;

  @SerializedName("requestedDocumentTypes")
  private List<DocumentType> requestedDocumentTypes = new ArrayList<DocumentType>();

  public RequestedDocumentSpecification format(DocumentFormat format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @ApiModelProperty(required = true, value = "")
  public DocumentFormat getFormat() {
    return format;
  }

  public void setFormat(DocumentFormat format) {
    this.format = format;
  }

  public RequestedDocumentSpecification size(DocumentSize size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @ApiModelProperty(required = true, value = "")
  public DocumentSize getSize() {
    return size;
  }

  public void setSize(DocumentSize size) {
    this.size = size;
  }

  public RequestedDocumentSpecification dpi(Integer dpi) {
    this.dpi = dpi;
    return this;
  }

   /**
   * Get dpi
   * @return dpi
  **/
  @ApiModelProperty(value = "")
  public Integer getDpi() {
    return dpi;
  }

  public void setDpi(Integer dpi) {
    this.dpi = dpi;
  }

  public RequestedDocumentSpecification pageLayout(String pageLayout) {
    this.pageLayout = pageLayout;
    return this;
  }

   /**
   * Get pageLayout
   * @return pageLayout
  **/
  @ApiModelProperty(value = "")
  public String getPageLayout() {
    return pageLayout;
  }

  public void setPageLayout(String pageLayout) {
    this.pageLayout = pageLayout;
  }

  public RequestedDocumentSpecification needFileJoining(Boolean needFileJoining) {
    this.needFileJoining = needFileJoining;
    return this;
  }

   /**
   * Get needFileJoining
   * @return needFileJoining
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean getNeedFileJoining() {
    return needFileJoining;
  }

  public void setNeedFileJoining(Boolean needFileJoining) {
    this.needFileJoining = needFileJoining;
  }

  public RequestedDocumentSpecification requestedDocumentTypes(List<DocumentType> requestedDocumentTypes) {
    this.requestedDocumentTypes = requestedDocumentTypes;
    return this;
  }

  public RequestedDocumentSpecification addRequestedDocumentTypesItem(DocumentType requestedDocumentTypesItem) {
    this.requestedDocumentTypes.add(requestedDocumentTypesItem);
    return this;
  }

   /**
   * A list of the document types requested.
   * @return requestedDocumentTypes
  **/
  @ApiModelProperty(required = true, value = "A list of the document types requested.")
  public List<DocumentType> getRequestedDocumentTypes() {
    return requestedDocumentTypes;
  }

  public void setRequestedDocumentTypes(List<DocumentType> requestedDocumentTypes) {
    this.requestedDocumentTypes = requestedDocumentTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestedDocumentSpecification requestedDocumentSpecification = (RequestedDocumentSpecification) o;
    return Objects.equals(this.format, requestedDocumentSpecification.format) &&
        Objects.equals(this.size, requestedDocumentSpecification.size) &&
        Objects.equals(this.dpi, requestedDocumentSpecification.dpi) &&
        Objects.equals(this.pageLayout, requestedDocumentSpecification.pageLayout) &&
        Objects.equals(this.needFileJoining, requestedDocumentSpecification.needFileJoining) &&
        Objects.equals(this.requestedDocumentTypes, requestedDocumentSpecification.requestedDocumentTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, size, dpi, pageLayout, needFileJoining, requestedDocumentTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestedDocumentSpecification {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    dpi: ").append(toIndentedString(dpi)).append("\n");
    sb.append("    pageLayout: ").append(toIndentedString(pageLayout)).append("\n");
    sb.append("    needFileJoining: ").append(toIndentedString(needFileJoining)).append("\n");
    sb.append("    requestedDocumentTypes: ").append(toIndentedString(requestedDocumentTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

