/*
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).
 *
 * OpenAPI spec version: 2022-05-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Condition;
import java.io.IOException;

/**
 * The input required for building the &#x60;LowestPricedOffers&#x60; data in the response.
 */
@ApiModel(description = "The input required for building the `LowestPricedOffers` data in the response.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-10-31T20:08:31.630+08:00")
public class LowestPricedOffersInput {
  @SerializedName("itemCondition")
  private Condition itemCondition = null;

  /**
   * The type of offers requested for the &#x60;LowestPricedOffers&#x60;. The &#x60;offerType&#x60; options are &#x60;Consumer&#x60; or &#x60;Business&#x60;. The default &#x60;offerType&#x60; is &#x60;Consumer&#x60;.
   */
  @JsonAdapter(OfferTypeEnum.Adapter.class)
  public enum OfferTypeEnum {
    CONSUMER("CONSUMER");

    private String value;

    OfferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfferTypeEnum fromValue(String text) {
      for (OfferTypeEnum b : OfferTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OfferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OfferTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("offerType")
  private OfferTypeEnum offerType = null;

  public LowestPricedOffersInput itemCondition(Condition itemCondition) {
    this.itemCondition = itemCondition;
    return this;
  }

   /**
   * The condition of the item offer that was requested for the &#x60;LowestPricedOffers&#x60;. The default &#x60;itemCondition&#x60; is &#x60;New&#x60;.
   * @return itemCondition
  **/
  @ApiModelProperty(required = true, value = "The condition of the item offer that was requested for the `LowestPricedOffers`. The default `itemCondition` is `New`.")
  public Condition getItemCondition() {
    return itemCondition;
  }

  public void setItemCondition(Condition itemCondition) {
    this.itemCondition = itemCondition;
  }

  public LowestPricedOffersInput offerType(OfferTypeEnum offerType) {
    this.offerType = offerType;
    return this;
  }

   /**
   * The type of offers requested for the &#x60;LowestPricedOffers&#x60;. The &#x60;offerType&#x60; options are &#x60;Consumer&#x60; or &#x60;Business&#x60;. The default &#x60;offerType&#x60; is &#x60;Consumer&#x60;.
   * @return offerType
  **/
  @ApiModelProperty(required = true, value = "The type of offers requested for the `LowestPricedOffers`. The `offerType` options are `Consumer` or `Business`. The default `offerType` is `Consumer`.")
  public OfferTypeEnum getOfferType() {
    return offerType;
  }

  public void setOfferType(OfferTypeEnum offerType) {
    this.offerType = offerType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LowestPricedOffersInput lowestPricedOffersInput = (LowestPricedOffersInput) o;
    return Objects.equals(this.itemCondition, lowestPricedOffersInput.itemCondition) &&
        Objects.equals(this.offerType, lowestPricedOffersInput.offerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemCondition, offerType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LowestPricedOffersInput {\n");
    
    sb.append("    itemCondition: ").append(toIndentedString(itemCondition)).append("\n");
    sb.append("    offerType: ").append(toIndentedString(offerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

